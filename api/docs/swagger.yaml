basePath: /
definitions:
  dto.Access:
    properties:
      code:
        type: string
    type: object
  dto.JwtCustomClaims:
    properties:
      Email:
        type: string
      Password:
        type: string
    type: object
  entities.Note:
    properties:
      note:
        type: number
      number:
        type: integer
      surveyCode:
        type: string
    type: object
  entities.Role:
    properties:
      id:
        type: integer
      name:
        type: string
      userID:
        type: integer
    type: object
  entities.Survey:
    properties:
      code:
        type: string
      endDate:
        type: string
      notes:
        items:
          $ref: '#/definitions/entities.Note'
        type: array
      startDate:
        type: string
      teamName:
        type: string
    type: object
  entities.Team:
    properties:
      frequency:
        type: integer
      name:
        type: string
      num_mumbers:
        type: integer
      startDate:
        type: string
      surveys:
        items:
          $ref: '#/definitions/entities.Survey'
        type: array
      users:
        items:
          $ref: '#/definitions/entities.User'
        type: array
    type: object
  entities.User:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/entities.Role'
        type: array
      teams:
        items:
          $ref: '#/definitions/entities.Team'
        type: array
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /access:
    post:
      consumes:
      - application/json
      description: you should send a survey code to access
      parameters:
      - description: string
        in: body
        name: Code
        required: true
        schema:
          $ref: '#/definitions/dto.Access'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Access to survey
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: String
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/dto.JwtCustomClaims'
      - description: String
        in: body
        name: Password
        required: true
        schema:
          $ref: '#/definitions/dto.JwtCustomClaims'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JwtCustomClaims'
      summary: Login
      tags:
      - Authentication
  /me:
    get:
      consumes:
      - application/json
      description: Current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Current User
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: string
        in: body
        name: Full-name
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: string
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: string
        in: body
        name: Password
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: int
        in: body
        name: Phone
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Register
      tags:
      - Authentication
  /role/:id:
    delete:
      consumes:
      - application/json
      description: returns a empty role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Role'
      summary: Delete a role
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: returns one role by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Role'
      summary: Get one role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: returns the role updated
      parameters:
      - description: String
        in: body
        name: Name
        required: true
        schema:
          $ref: '#/definitions/entities.Role'
      - description: int
        in: body
        name: UserID
        required: true
        schema:
          $ref: '#/definitions/entities.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Role'
      summary: Update a new role
      tags:
      - Roles
  /role/create:
    post:
      consumes:
      - application/json
      description: returns the role created
      parameters:
      - description: String
        in: body
        name: Name
        required: true
        schema:
          $ref: '#/definitions/entities.Role'
      - description: int
        in: body
        name: UserID
        required: true
        schema:
          $ref: '#/definitions/entities.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Role'
      summary: Create a new role
      tags:
      - Roles
  /roles:
    get:
      consumes:
      - application/json
      description: returns all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Role'
      summary: Get all roles
      tags:
      - Roles
  /survey/:surveyCode:
    delete:
      consumes:
      - application/json
      description: returns a empty survey
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Delete a survey
      tags:
      - Survies
    get:
      consumes:
      - application/json
      description: returns survey by it code
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Get survey by it code
      tags:
      - Survies
    put:
      consumes:
      - application/json
      description: returns the survey updated
      parameters:
      - description: Date
        in: body
        name: StartDate
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      - description: Date
        in: body
        name: EndDate
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      - description: String
        in: body
        name: Code
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      - description: String
        in: body
        name: TeamName
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Update a survey
      tags:
      - Survies
  /survey/:surveyCode/addNotes:
    post:
      consumes:
      - application/json
      description: you should send an array of Notes. Those will be saved in the survey with code provided.
      parameters:
      - description: int
        in: body
        name: Number
        required: true
        schema:
          $ref: '#/definitions/entities.Note'
      - description: int
        in: body
        name: Note
        required: true
        schema:
          $ref: '#/definitions/entities.Note'
      - description: string
        in: body
        name: surveyCode
        required: true
        schema:
          $ref: '#/definitions/entities.Note'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Add notes to survey
      tags:
      - Survies
  /survey/create:
    post:
      consumes:
      - application/json
      description: returns the survey created
      parameters:
      - description: Date
        in: body
        name: StartDate
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      - description: Date
        in: body
        name: EndDate
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      - description: String
        in: body
        name: Code
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      - description: String
        in: body
        name: TeamName
        required: true
        schema:
          $ref: '#/definitions/entities.Survey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Create a new survey
      tags:
      - Survies
  /survey/result/:surveyCode:
    get:
      consumes:
      - application/json
      description: returns the average of all the survey notes
      produces:
      - application/json
      responses:
        "200":
          description: int
      summary: Survey result
      tags:
      - Survies
  /survies:
    get:
      consumes:
      - application/json
      description: returns all survies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Survey'
      summary: Get all survies
      tags:
      - Survies
  /team/:teamName:
    delete:
      consumes:
      - application/json
      description: returns a team updated
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Team'
      summary: Update a team
      tags:
      - Teams
    get:
      consumes:
      - application/json
      description: returns one team by teamName
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Team'
      summary: Get one team
      tags:
      - Teams
    put:
      consumes:
      - application/json
      description: returns a team updated
      parameters:
      - description: String
        in: body
        name: Name
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: int
        in: body
        name: Num_members
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: int
        in: body
        name: Frequency
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: Date
        in: body
        name: StartDate
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Team'
      summary: Update a team
      tags:
      - Teams
  /team/create:
    post:
      consumes:
      - application/json
      description: returns a team created
      parameters:
      - description: String
        in: body
        name: Name
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: int
        in: body
        name: Num_members
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: int
        in: body
        name: Frequency
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: Date
        in: body
        name: StartDate
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Team'
      summary: Create a new team
      tags:
      - Teams
  /teams:
    get:
      consumes:
      - application/json
      description: returns all teams
      parameters:
      - description: String
        in: body
        name: Name
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: int
        in: body
        name: Num_members
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: int
        in: body
        name: Frequency
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      - description: Date
        in: body
        name: StartDate
        required: true
        schema:
          $ref: '#/definitions/entities.Team'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Team'
      summary: Get all teams
      tags:
      - Teams
  /user/:id:
    delete:
      consumes:
      - application/json
      description: returns a empty user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: returns one
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Get one users
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: returns the user updated
      parameters:
      - description: String
        in: body
        name: Full_name
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: String
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: String
        in: body
        name: Password
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Update a new user
      tags:
      - Users
  /user/create:
    post:
      consumes:
      - application/json
      description: returns the user created
      parameters:
      - description: String
        in: body
        name: Full_name
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: String
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      - description: String
        in: body
        name: Password
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Create a new user
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: returns all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Get all users
      tags:
      - Users
swagger: "2.0"
